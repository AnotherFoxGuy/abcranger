#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

#include "readstatobs.hpp"
#include "readreftable.hpp"
#include "cxxopts.hpp"
#include "EstimParam.hpp"
#include "ks.hpp"

std::vector<double> expectationsR{
0.2750102,0.2621580,0.2524603,0.2752484,0.2613914,0.3053515,0.3890103,
0.3006923,0.2938646,0.3008113,0.2546133,0.2420966,0.3395499,0.2502626,
0.2504991,0.3142907,0.2642482,0.2115095,0.3131835,0.2941080,0.3045350,
0.3104305,0.2500123,0.2743340,0.2228655,0.2763524,0.2629800,0.2868392,
0.2927846,0.3021692,0.3478148,0.2938765,0.3257682,0.2515558,0.2683273,
0.2758023,0.3101552,0.2688548,0.3188720,0.3089679,0.2891729,0.2872723,
0.2846869,0.2945412,0.3489542,0.2711409,0.2606260,0.2722946,0.3235559,
0.3703271,0.3168535,0.2345737,0.3115610,0.2912599,0.2349190,0.3076406,
0.2339293,0.2381466,0.2688115,0.2863987,0.2948090,0.3110934,0.1997776,
0.2897379,0.3007686,0.2995973,0.3950090,0.3210607,0.2911622,0.2809231,
0.2737334,0.2645061,0.3009658,0.2194454,0.2818686,0.2467593,0.3316375,
0.3200897,0.3392401,0.2609939,0.3064253,0.2820435,0.2820018,0.3025445,
0.2459139,0.2561153,0.2752326,0.3633249,0.2447944,0.2257617,0.2692950,
0.2923328,0.3057228,0.2965151,0.2686705,0.3858687,0.3441155,0.3229371,
0.3124667,0.3098363
};

std::vector<double> variancesR{  
0.04556904,0.03475049,0.03587322,0.03960743,0.03957511,0.04456264,
0.04816983,0.04600785,0.03613711,0.03873040,0.03392767,0.02704835,
0.05223386,0.04013753,0.03701400,0.04162672,0.03590879,0.02267266,
0.04270649,0.04644567,0.06096588,0.04188177,0.02253644,0.03454669,
0.02095595,0.04706461,0.03435676,0.03988460,0.03509890,0.04834384,
0.05057779,0.04328268,0.04353376,0.03537731,0.03842381,0.04285427,
0.05455667,0.04324916,0.05016176,0.03816916,0.05325782,0.04061680,
0.03393243,0.04102412,0.04835473,0.03021255,0.03622161,0.03799513,
0.05272296,0.05313339,0.03294991,0.02830851,0.04677803,0.03975980,
0.03063499,0.03998951,0.02776152,0.02676521,0.03856786,0.05607207,
0.04333448,0.05528463,0.02113760,0.04393490,0.03734144,0.04372047,
0.04594968,0.04288984,0.05082213,0.03293072,0.03920439,0.05373539,
0.02964515,0.02024318,0.04255173,0.03250347,0.04438807,0.04590293,
0.04881650,0.03479079,0.04800310,0.04376008,0.05260267,0.04246846,
0.02900619,0.02635463,0.04408260,0.06642308,0.02872993,0.03616477,
0.03735690,0.04153443,0.03411746,0.04342401,0.03251921,0.05055608,
0.04854585,0.04540580,0.04364088,0.03936035
};

std::vector<double> quantiles1R{
0.06055183,0.05982934,0.06039706,0.06260663,0.06142832,0.06063158,
0.07338279,0.07132879,0.05999040,0.05987559,0.06211764,0.06013107,
0.06371064,0.05983499,0.06030375,0.06250650,0.06197247,0.06266694,
0.05907210,0.06039558,0.05986754,0.06356741,0.06065888,0.06729672,
0.06110975,0.06160401,0.06685797,0.06287610,0.06258890,0.06474516,
0.05994503,0.06675001,0.07493291,0.05986443,0.06043922,0.06153961,
0.05988062,0.05846703,0.06051492,0.06281420,0.06018491,0.06389985,
0.06474011,0.06117922,0.06903361,0.06705507,0.06063495,0.06212824,
0.06044210,0.07271396,0.07483954,0.05982230,0.06711463,0.06103765,
0.06052890,0.06061995,0.06719301,0.06001812,0.05986520,0.06385673,
0.07150209,0.06942832,0.06155922,0.05988122,0.06465324,0.06157748,
0.06405706,0.06725029,0.05995008,0.05983799,0.06154474,0.06070457,
0.07314094,0.06273435,0.06030837,0.06153492,0.06678514,0.06065679,
0.07502472,0.06453247,0.06068868,0.05902282,0.05826838,0.06038678,
0.07057740,0.06036000,0.06465044,0.06038491,0.06012107,0.05879481,
0.06043966,0.06719194,0.06316538,0.06045053,0.05985758,0.07319457,
0.06694031,0.07295122,0.06338600,0.05565731
};

std::vector<double> quantiles2R{
0.1696922,0.1747201,0.1961915,0.1846586,0.1775724,0.2093521,0.2817318,
0.1736763,0.1990677,0.2127690,0.1489630,0.1598564,0.2034921,0.1672400,
0.1543620,0.1963227,0.1733832,0.1542942,0.2093668,0.1994958,0.1585503,
0.1987633,0.1833077,0.1771114,0.1664128,0.1868289,0.1857383,0.2063451,
0.2008468,0.1830775,0.2248219,0.1774106,0.2279409,0.1496138,0.1749427,
0.1793716,0.2048541,0.1926609,0.1993694,0.1996754,0.1731111,0.2084798,
0.1780188,0.1952624,0.2341757,0.1916657,0.1576498,0.1769078,0.2032838,
0.2601595,0.2066734,0.1543618,0.1781246,0.1787015,0.1541555,0.1748955,
0.1481741,0.1734786,0.1720570,0.1722422,0.1788177,0.1997216,0.1463666,
0.1737723,0.2020114,0.1835838,0.3187384,0.1995999,0.1696894,0.1791210,
0.1696565,0.1457196,0.1995818,0.1672469,0.1942086,0.1384316,0.2205461,
0.2093180,0.2111406,0.1794103,0.1856228,0.1753081,0.1788688,0.1793370,
0.1710007,0.1788348,0.1625768,0.2389825,0.1385152,0.1358445,0.1736349,
0.1990718,0.1794255,0.1985202,0.1747255,0.3071158,0.2411599,0.1990684,
0.1794260,0.1990276
};

std::vector<double> quantiles3R{
0.1696922,0.1747201,0.1961915,0.1846586,0.1775724,0.2093521,0.2817318,
0.1736763,0.1990677,0.2127690,0.1489630,0.1598564,0.2034921,0.1672400,
0.1543620,0.1963227,0.1733832,0.1542942,0.2093668,0.1994958,0.1585503,
0.1987633,0.1833077,0.1771114,0.1664128,0.1868289,0.1857383,0.2063451,
0.2008468,0.1830775,0.2248219,0.1774106,0.2279409,0.1496138,0.1749427,
0.1793716,0.2048541,0.1926609,0.1993694,0.1996754,0.1731111,0.2084798,
0.1780188,0.1952624,0.2341757,0.1916657,0.1576498,0.1769078,0.2032838,
0.2601595,0.2066734,0.1543618,0.1781246,0.1787015,0.1541555,0.1748955,
0.1481741,0.1734786,0.1720570,0.1722422,0.1788177,0.1997216,0.1463666,
0.1737723,0.2020114,0.1835838,0.3187384,0.1995999,0.1696894,0.1791210,
0.1696565,0.1457196,0.1995818,0.1672469,0.1942086,0.1384316,0.2205461,
0.2093180,0.2111406,0.1794103,0.1856228,0.1753081,0.1788688,0.1793370,
0.1710007,0.1788348,0.1625768,0.2389825,0.1385152,0.1358445,0.1736349,
0.1990718,0.1794255,0.1985202,0.1747255,0.3071158,0.2411599,0.1990684,
0.1794260,0.1990276
};

TEST_CASE("EstimParam KS distribution")
{   
    size_t nref;
    std::string headerfile,reftablefile,statobsfile;
 
    try {
        std::vector<std::string> args{"EstimParam","--parameter","ra","--ntrain","1000","--ntest","50","--chosenscen","1" };
        std::vector<char *> argv;
        for(std::string &s: args) argv.push_back(&s[0]);
        argv.push_back(NULL);

        cxxopts::Options options("", "");

        options
            .positional_help("[optional args]")
            .show_positional_help();

        options.add_options()
            ("h,header","Header file",cxxopts::value<std::string>()->default_value("headerRF.txt"))
            ("r,reftable","Reftable file",cxxopts::value<std::string>()->default_value("reftableRF.bin"))
            ("b,statobs","Statobs file",cxxopts::value<std::string>()->default_value("statobsRF.txt"))
            ("o,output","Prefix output",cxxopts::value<std::string>()->default_value("estimparam_out"))
            ("n,nref","Number of samples, 0 means all",cxxopts::value<size_t>()->default_value("0"))
            ("m,minnodesize","Minimal node size. 0 means 1 for classification or 5 for regression",cxxopts::value<size_t>()->default_value("0"))
            ("t,ntree","Number of trees",cxxopts::value<size_t>()->default_value("500"))
            ("j,threads","Number of threads, 0 means all",cxxopts::value<size_t>()->default_value("0"))
            ("s,seed","Seed, generated by default",cxxopts::value<size_t>()->default_value("0"))
            ("c,noisecolumns","Number of noise columns",cxxopts::value<size_t>()->default_value("5"))
            ("nopls","Disable PLS")
            ("chosenscen","Chosen scenario (mandatory)", cxxopts::value<size_t>())
            ("ntrain","number of training samples (mandatory)",cxxopts::value<size_t>())
            ("ntest","number of testing samples (mandatory)",cxxopts::value<size_t>())
            ("parameter","name of the parameter of interest (mandatory)",cxxopts::value<std::string>())
            ("help", "Print help")
            ;
        int argc = argv.size()-1;
        char ** argvc = argv.data();
        auto opts = options.parse(argc,argvc);

        if (opts.count("help")) {
          std::cout << options.help({"", "Group"}) << std::endl;
            exit(0);
        }

        size_t nrun = 100;
        std::vector<double> expectations(nrun),
            variances(nrun),
            quantiles1(nrun),
            quantiles2(nrun),
            quantiles3(nrun);

        for(auto i = 0; i < nrun; i++) {
            headerfile = opts["h"].as<std::string>();
            reftablefile = opts["r"].as<std::string>();
            statobsfile = opts["b"].as<std::string>();

            auto myread = readreftable(headerfile, reftablefile, nref);
            const auto statobs = readStatObs(statobsfile);
            auto res = EstimParam_fun(myread,statobs,opts,true);
            std::cout << i << "...";
            expectations[i] = res.expectation;
            variances[i] = res.variance;
            quantiles1[i] = res.quantiles[0];
            quantiles2[i] = res.quantiles[1];
            quantiles3[i] = res.quantiles[2];
        }
        double D,pvalue1,pvalue2,pvalue3,pvalue4,pvalue5;

        D = KSTest(expectationsR,expectations);
        pvalue1 = 1-psmirnov2x(D,nrun,nrun);
        CHECK( pvalue1 >= 0.05 );

        D = KSTest(variancesR,variances);
        pvalue2 = 1-psmirnov2x(D,nrun,nrun);
        CHECK( pvalue2 >= 0.05 );

        D = KSTest(quantiles1R,quantiles1);
        pvalue3 = 1-psmirnov2x(D,nrun,nrun);
        CHECK( pvalue3 >= 0.05 );

        D = KSTest(quantiles2R,quantiles2);
        pvalue4 = 1-psmirnov2x(D,nrun,nrun);
        CHECK( pvalue4 >= 0.05 );

        D = KSTest(quantiles3R,quantiles3);
        pvalue5 = 1-psmirnov2x(D,nrun,nrun);
        CHECK( pvalue5 >= 0.05 );
    } catch (const cxxopts::OptionException& e)
      {
        std::cout << "error parsing options: " << e.what() << std::endl;
        exit(1);
    } 

}