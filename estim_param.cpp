#include "readstatobs.hpp"
#include "readreftable.hpp"
#include "cxxopts.hpp"
#include "EstimParam.hpp"

//auto print = [](int i) { std::cout << i << ' '; };

int main(int argc, char* argv[])
{
    size_t nref, chosenscen;
    std::string headerfile,reftablefile,statobsfile;
 
    try {
        size_t nref;
        cxxopts::Options options(argv[0], " - ABC Random Forest/Model parameter estimation command line options");

        options
            .positional_help("[optional args]")
            .show_positional_help();

        options.add_options()
            ("h,header","Header file",cxxopts::value<std::string>()->default_value("headerRF.txt"))
            ("r,reftable","Reftable file",cxxopts::value<std::string>()->default_value("reftableRF.bin"))
            ("b,statobs","Statobs file",cxxopts::value<std::string>()->default_value("statobsRF.txt"))
            ("o,output","Prefix output",cxxopts::value<std::string>()->default_value("estimparam_out"))
            ("n,nref","Number of samples, 0 means all",cxxopts::value<size_t>()->default_value("0"))
            ("m,minnodesize","Minimal node size. 0 means 1 for classification or 5 for regression",cxxopts::value<size_t>()->default_value("0"))
            ("t,ntree","Number of trees",cxxopts::value<size_t>()->default_value("500"))
            ("j,threads","Number of threads, 0 means all",cxxopts::value<size_t>()->default_value("0"))
            ("s,seed","Seed, generated by default",cxxopts::value<size_t>()->default_value("0"))
            ("c,noisecolumns","Number of noise columns",cxxopts::value<size_t>()->default_value("5"))
            ("nopls","Disable PLS")
            ("chosenscen","Chosen scenario (mandatory)", cxxopts::value<size_t>())
            ("ntrain","number of training samples (mandatory)",cxxopts::value<size_t>())
            ("ntest","number of testing samples (mandatory)",cxxopts::value<size_t>())
            ("parameter","name of the parameter of interest (mandatory)",cxxopts::value<std::string>())
            ("help", "Print help")
            ;
        auto opts = options.parse(argc,argv);

        if (opts.count("help")) {
          std::cout << options.help({"", "Group"}) << std::endl;
            exit(0);
        }

        nref = opts["n"].as<size_t>();

        chosenscen = static_cast<double>(opts["chosenscen"].as<size_t>());
        headerfile = opts["h"].as<std::string>();
        reftablefile = opts["r"].as<std::string>();
        statobsfile = opts["b"].as<std::string>();

        auto myread = readreftable_scen(headerfile, reftablefile, chosenscen, nref);
        const auto statobs = readStatObs(statobsfile);
        auto res = EstimParam_fun(myread,statobs,opts);


    } catch (const cxxopts::OptionException& e)
      {
        std::cout << "error parsing options: " << e.what() << std::endl;
        exit(1);
    } 


}